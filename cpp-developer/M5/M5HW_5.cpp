/*
##### Задание 5. Усложнение задачи про кирпич

###### Что нужно сделать

Напишите программу, которая проверяет, можно ли первую коробку положить внутрь второй.

###### Условие:

В модуле вы разобрали, как написать программу для проверки, удастся ли поместить кирпич определённых размеров в определённое прямоугольное отверстие. 

Теперь представьте, что у вас есть две коробки. Одна размером A × B × C, а другая — M × N ×K. 

Напишите программу, которая по шести данным числам A, B, C, M, N, K проверяет, можно ли первую коробку положить внутрь второй. 

Коробки можно как угодно переворачивать, но одна коробка должна помещаться в другую целиком. 

###### Советы и рекомендации

- Одна коробка в другую должна помещаться по всем трём измерениям.
- Постарайтесь сделать свою программу по возможности лаконичнее.
*/

#include <iostream>

/*
* @brief Сортировка массивов целых чисел пузырьком
* @param arr Указатель на первый элемент сортируемого массива
* @param length Длина сортируемого массива
* @warning Изменяет исходный массив на месте
* */
void bubbleSort(int *arr, int length) {
    // Флаг сортировки
    bool swapped = true;
    while (swapped)
    {
        swapped = false;
        for (int idx = 1; idx < length; idx++) {
            if (arr[idx - 1] > arr[idx]) {
                std::swap(arr[idx - 1], arr[idx]);
                swapped = true;
            }
        }
    }
}

int m5Task5 () {

    std::cout << "Коробки\n";

    // Количество сторон коробок
    int length = 3;

    // Размеры первой коробки
    int boxA[3] = {0, 0, 0};

    // Размеры второй коробки
    int boxB[3] = {0, 0, 0};

    // Получение ввода от пользователя
    std::cout << "-------------------------------\n";
    std::cout << "Введите размеры первой коробки,\nразделенные пробелом (A B C): ";
    std::cin >> boxA[0] >> boxA[1] >> boxA[2];

    std::cout << "Введите размеры второй коробки,\nразделенные пробелом (M N K): ";
    std::cin >> boxB[0] >> boxB[1] >> boxB[2];
    std::cout << "-------------------------------\n";

    // Сортировка измерений
    bubbleSort(boxA, length);
    bubbleSort(boxB, length);

    // Сравнение размеров
    if (boxA[0] >= boxB[0] && boxA[1] >= boxB[1] && boxA[2] >= boxB[2]) {
        std::cout << "Вторая коробка помещается в первую";
    } else if (boxB[0] >= boxA[0] && boxB[1] >= boxA[1] && boxB[2] >= boxA[2]) {
        std::cout << "Первая коробка помещается во вторую";
    } else {
        std::cout << "Коробки не совместимы";
    }

    return 0;
}

int main() {
    return m5Task5();
}